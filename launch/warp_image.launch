<launch>
    <arg name="camera_image_topic" default="/camera/image_raw"/>
    <arg name="warped_image_topic" default="/warped_image"/>
    <arg name="undistort_out" default="/undistorted_image"/>
    <arg name="homography_topic" default="/camera/camera_homography"/>
    <arg name="debug" default="false"/>
    <arg name="use_nodelet" default="false"/>
    <arg name="nodelet_manager" default=""/>
    <arg name="output_image_type" default="0"/>

    <arg if="$(arg debug)" name="launch-prefix" value="gdb -ex run --args"/>
    <arg unless="$(arg debug)" name="launch-prefix" value=""/>

    <group unless="$(arg use_nodelet)">
        <node name="warp_image_node" pkg="drive_ros_image_recognition" type="warp_image_node" respawn="false" output="screen" launch-prefix="$(arg launch-prefix)">
            <remap from="img_in" to="$(arg camera_image_topic)"/>
            <remap from="warped_out" to="$(arg warped_image_topic)"/>
            <remap from="homography_in" to="$(arg homography_topic)"/>
             <!-- debug: undistored camera image (not warped) -->
            <remap from="undistort_out" to="$(arg undistort_out)"/>
            <rosparam command="load" file="$(find drive_ros_image_recognition)/config/homography.yaml"/>
            <param name="output_image_type" value="$(arg output_image_type)"/>
        </node>
    </group>

    <group if="$(arg use_nodelet)">
        <arg if="$(eval arg('nodelet_manager') == '')" name="manager_used" value="warp_image_nodelet_manager"/>
        <arg unless="$(eval arg('nodelet_manager') == '')" name="manager_used" value="$(arg nodelet_manager)"/>

        <node if="$(eval arg('nodelet_manager') == '')" pkg="nodelet" type="nodelet" name="warp_image_nodelet_manager"  args="manager" output="screen"/>
        <node pkg="nodelet" type="nodelet" name="warp_image_nodelet" args="load drive_ros_image_recognition/WarpImageNodelet $(arg manager_used)" output="screen" launch-prefix="$(arg launch-prefix)">
            <remap from="img_in" to="$(arg camera_image_topic)"/>
            <remap from="warped_out" to="$(arg warped_image_topic)"/>
            <remap from="homography_in" to="$(arg homography_topic)"/>
             <!-- debug: undistored camera image (not warped) -->
            <remap from="undistort_out" to="$(arg undistort_out)"/>
            <rosparam command="load" file="$(find drive_ros_image_recognition)/config/homography.yaml"/>
            <param name="output_image_type" value="$(arg output_image_type)"/>
        </node>
    </group>
</launch>
